//light source spawns light particles headed in a direction determined by its angle
//light source can be moved, and have its angle changed
class LightSource extends Unit{
  Body body;
  float spawnAngle;
  float radius;
  float x, y;
  
  LightSource()
  {
    spawnAngle = radians(75);
    radius = 30;
    x = random(0, WIDTH);
    y = random(0, HEIGHT);
    makeBody(x, y, radius);
    body.setUserData(this);
  }
  
  ArrayList spawn(int k)
  {
    ArrayList returnParticles = new ArrayList();
    
    float dir = random(radians(-spawnAngle/2), radians(spawnAngle/2));
    
    //must be inside the LightSource
    float xin = random(x-radius, x+radius);
    float yin = random(y-radius, y+radius);
    
    for(int i = 0; i < k; i++)
     {
        returnParticles.add(new LightParticle(xin, yin, dir)); 
        println("Particle spawned");
     }
     return returnParticles;
  } 
  
  void display()
  {
    color cl;
    
    //light ring
    cl = color(255, 0, 0, 100);
    fill(cl);
    ellipse(x,y,radius*2,radius*2);
    noStroke();
    
    //Bulb
    cl = color(255, 255, 0);
    fill(cl);
    stroke(2);
    ellipse(x, y, radius*2, radius*2);
    noStroke();
    
    noFill();
  }
  void update()
  {
//    ArrayList particleList = spawn(1);
//    for(int i = 0; i < particleList.size(); i++)
//    {
//      LightParticle temp = (LightParticle) particleList.get(i);
//      temp.update();
//      temp.display();
//    }
  }
  
  void makeBody(float x, float y, float r) {
    // Define a body
    BodyDef bd = new BodyDef();
    // Set its position
    bd.position = box2d.screenToWorld(x,y);
    body = box2d.world.createBody(bd);

    // Make the body's shape a circle
    CircleDef cd = new CircleDef();
    cd.radius = box2d.scaleScreenToWorld(r);
    cd.density = 1.0f;
    cd.friction = 0.01f;
    cd.restitution = 0.3f; // Restitution is bounciness
    body.createShape(cd);

    // Always do this at the end
    body.setMassFromShapes();
  }
  
  void draw(){
    color cl = color(255, 0, 0);
    fill(cl);
    stroke(2);
    ellipse(x, y, radius, radius);
    noFill();
    noStroke();
    
    
  }//end draw
}

//light particles only interact with obstacles and units
//light particles are generated by light sources, and move at a uniform speed
class LightParticle extends Particle{
  
  float dir;
  
  LightParticle(float xin, float yin, float dirIn){
    super(xin, yin, 2);
    dir = dirIn;//direction
   // speed = 2;//this is the speed of light!

    makeBody(x, y, radius);
    body.setUserData(this);
  }
  
  boolean update(){ //can pass an is-dead flag to the updating class, at which point it will be removed from its arrayList
    if(x > width+radius || x < 0-radius || 
       y > height+radius || y < 0-radius){//exits bounds
        done();
        return false;
    }//end if
    else
      return true;
  }//end update()
  
  void display()
  {
    color cl = color(255, 255, 0);
    fill(cl);
    stroke(2);
    ellipse(x, y, radius*2, radius*2);
    noStroke();
    noFill();
  }
  
  void collide()
  {
  }//checks for collisions
  
   void makeBody(float x, float y, float r) {
    // Define a body
    BodyDef bd = new BodyDef();
    // Set its position
    bd.position = box2d.screenToWorld(x,y);
    body = box2d.world.createBody(bd);

    // Make the body's shape a circle
    CircleDef cd = new CircleDef();
    cd.radius = box2d.scaleScreenToWorld(r);
    cd.density = 1.0f;
    cd.friction = 0.01f;
    cd.restitution = 0.3f; // Restitution is bounciness
    body.createShape(cd);

    // Always do this at the end
    body.setMassFromShapes();

    // Give it a random initial velocity (and angular velocity)
    body.setLinearVelocity(new Vec2(1, 1));
    //body.setAngularVelocity(random(-10,10));
  }
}

////manages all light particles
//class LightSystem{
//  ArrayList particles;
//  LightSystem(LightSource source){
//    particles = source.spawn(20);
//  }
//}
