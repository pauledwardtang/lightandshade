//light source spawns light particles headed in a direction determined by its angle
//light source can be moved, and have its angle changed
class LightSource extends Particle{
  float spawnAngle;
  ArrayList particles = new ArrayList();
  
  LightSource(int x, int y, int id)
  {
    super(40, "neutral", id, color(255, 175, 0), "player");
    makeBody(x, y, radius);
    body.setUserData(this);
    target = new Target(x,y);
  }

  //adds k new particles to the particle list.
  LightParticle spawn()
  {
    LightParticle particle;
    float a = body.getAngle();
    float dir = random((spawnAngle/2 - a), (spawnAngle/2 + a));
    float xin, yin;

    Vec2 pos = box2d.getScreenPos(body);
    //must be inside the LightSource
    xin = random(pos.x-radius/2, pos.x+radius/2);
    yin = random(pos.y-radius/2, pos.y+radius/2);
    particle = new LightParticle(xin, yin, dir, -1);

    return particle;
  } 
  
   //Puts the LightSource in the world
  void makeBody(float x, float y, float radius_) {
    // Define a body
    BodyDef bd = new BodyDef();
    // Set its position
    bd.position = box2d.screenToWorld(x,y);
    body = box2d.world.createBody(bd);

    // Make the body's shape a circle
    CircleDef cd = new CircleDef();
    cd.radius = box2d.scaleScreenToWorld(radius_);
    cd.density = 1.0f;
    cd.friction = 0.01f;
    cd.restitution = 0.3f; // Restitution is bounciness
    cd.filter.categoryBits = 0x0002;
    body.createShape(cd);

    // Always do this at the end
    body.setMassFromShapes();
  }
  
}//end LightSource


//light particles only interact with obstacles and units
//light particles are generated by light sources, and move at a uniform speed
class LightParticle extends Particle{
  
  float dir;
  boolean alive;
  float speed;
  
  LightParticle(float xin, float yin, float dirIn, int gID){
    
    super(5, "neutral", 2, color(255, 175, 0), "none");
    dir = dirIn;//direction
    alive = true;
    speed = 20; //this is the speed of light!
    makeBody(xin, yin, 5, gID);
    body.setUserData(this);
    body.setLinearVelocity(velocity());
    //println("Created a light particle");
  }
  
  Vec2 velocity()
  {
    Vec2 aVector = new Vec2(speed*cos(dir), speed*sin(dir));
    return aVector;
  }
  
  boolean isAlive()
  {
    return alive;
  }
  
  void update(){
    Vec2 pos = box2d.getScreenPos(body);
    if(pos.x > width+radius || pos.x < 0-radius || 
       pos.y > height+radius || pos.y < 0-radius){//exits bounds
        killBody();
        alive = false;
    }//end if
  }//end update()
  
  void display()
  {
    // We look at each body and get its screen position
    Vec2 pos = box2d.getScreenPos(body);
    pushMatrix();
    translate(pos.x,pos.y);
    fill(col);
    stroke(0);
    strokeWeight(1);
    ellipse(0,0,radius*2,radius*2);
    popMatrix();
  }
  
  //puts the LightParticle into the world
  void makeBody(float x, float y, float radius_, int groupID) {
    // Define a body
    BodyDef bd = new BodyDef();
    // Set its position
    bd.position = box2d.screenToWorld(x,y);
    body = box2d.world.createBody(bd);

    // Make the body's shape a circle
    CircleDef cd = new CircleDef();
    cd.radius = box2d.scaleScreenToWorld(radius_);
    cd.density = 0.01f;
    cd.friction = 0.0f;
    cd.restitution = 1.0f; // Restitution is bounciness
    cd.filter.groupIndex = groupID; //objects with same negative group index will not collide
    cd.filter.maskBits = 0xffff ^ 0x0002; //0xffff collides with everything; 0x0002 is the categoryBits of the LightSource; will not collide with LightSource
    body.createShape(cd);

    // Always do this at the end
    body.setMassFromShapes();
  }
}
