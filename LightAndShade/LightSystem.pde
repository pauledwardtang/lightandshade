
//light source spawns light particles headed in a direction determined by its angle
//light source can be moved, and have its angle changed
class LightSource extends Particle{
  float spawnAngle;
  ArrayList particles = new ArrayList();
  
  LightSource(int x, int y, int id)
  {
    super(x, y, 40, id, "lightsource", -1);
    changeColor(color(255, 0, 0, 100));
    spawnAngle = radians(180);
//    makeBody(x, y, radius, groupID);
//    body.setUserData(this);
  }

  //adds k new particles to the particle list.
  ArrayList spawn(int k)
  {
    float dir = random(-spawnAngle/2, spawnAngle/2);
    float xin, yin;
    
    for(int i = 0; i < k; i++)
     {
       Vec2 pos = box2d.getScreenPos(body);
       //must be inside the LightSource
        xin = random(pos.x-radius, pos.x+radius);
        yin = random(pos.y-radius, pos.y+radius);
        particles.add(new LightParticle(xin, yin, dir, groupID));
        println("Adding particle at " + xin + ", " + yin);
        println("Particle spawned");
     }
     return particles;
  } 
  
//  void display()
//  {
//    // We look at each body and get its screen position
//    Vec2 pos = box2d.getScreenPos(body);
//    // Get its angle of rotation
//    float a = body.getAngle();
//    pushMatrix();
//    translate(pos.x,pos.y);
//    rotate(a);
//    fill(color(255, 0, 0, 100));
//    stroke(0);
//    strokeWeight(1);
//    ellipse(0,0,radius*2,radius*2);
//    // Let's add a line so we can see the rotation
//    line(0,0,radius,0);
//    popMatrix();
//  
//  }
  
  //puts all particles in list on screen. Should be called after every spawn().
  void displayParticles()
  {
    for(int i = 0; i < particles.size(); i++)
    {
      LightParticle temp = (LightParticle) particles.get(i);
      if(temp.isAlive() == true)
      {
        temp.update();
        temp.display();
      }
      else
      {
        particles.remove(i);
      }
    }
  }
  void update()
  {
    spawn(1);
    displayParticles();
  }
//  
//  void makeBody(float x, float y, float r, int gID) {
//    super.makeBody(x, y, r, groupID);
//    body.setLinearVelocity(new Vec2(0, 0));
//    //body.setLinearVelocity(new Vec2(random(-10f,10f),random(5f,10f)));
//  }
  
//  void draw(){
//    color cl = color(255, 0, 0);
//    fill(cl);
//    stroke(2);
//    ellipse(x, y, radius, radius);
//    noFill();
//    noStroke();
//    
//    
//  }//end draw
}


//light particles only interact with obstacles and units
//light particles are generated by light sources, and move at a uniform speed
class LightParticle extends Particle{
  
  float dir;
  boolean alive;
  float speed;
  
  LightParticle(float xin, float yin, float dirIn, int gID){
    super(xin, yin, 5, 2, "neutral", gID);
    changeColor(color(255, 255, 0));
    dir = dirIn;//direction
    alive = true;
    speed = 8; //this is the speed of light!
//    makeBody(x, y, radius, groupID);
//    body.setUserData(this);
    body.setLinearVelocity(velocity());
  }
  
  Vec2 velocity()
  {
    Vec2 aVector = new Vec2(speed*cos(dir), speed*sin(dir));
    return aVector;
  }
  
  boolean isAlive()
  {
    return alive;
  }
  
  void update(){
    if(x > width+radius || x < 0-radius || 
       y > height+radius || y < 0-radius){//exits bounds
        killBody();
        alive = false;
    }//end if
    else
      alive = true;    
  }//end update()
  
  void display()
  {
    super.display();
  }
  
  void collide()
  {
    
  }//checks for collisions
  
//   void makeBody(float x, float y, float r) 
//   {
//     super.makeBody(x, y, r, groupID);
//     body.setLinearVelocity(new Vec2(8,8));
//  }
}

////manages all light particles
//class LightSystem{
//  ArrayList particles;
//  LightSystem(LightSource source){
//    particles = source.spawn(20);
//  }
//}


